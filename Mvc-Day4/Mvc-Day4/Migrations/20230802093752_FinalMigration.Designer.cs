// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Mvc_Day4.Areas.Identity.Data;

#nullable disable

namespace Mvc_Day4.Migrations
{
    [DbContext(typeof(IdentityContext))]
    [Migration("20230802093752_FinalMigration")]
    partial class FinalMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = "874c34bd-ed21-43da-8880-40fdfbd146d9",
                            Name = "Adminstration",
                            NormalizedName = "ADMINSTRATION"
                        },
                        new
                        {
                            Id = "6079f57f-a875-4257-81e0-d3540518482c",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "94a4da16-d0cd-47e2-86f3-2e500fd55e4e",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "9555489f-04b3-4aa8-b33e-d603c5f3b93c",
                            Name = "Med-Manager",
                            NormalizedName = "MED-MANAGER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "226f9379-7a36-4df6-a98d-260651b353d2",
                            RoleId = "874c34bd-ed21-43da-8880-40fdfbd146d9"
                        },
                        new
                        {
                            UserId = "bccdb075-ea49-45d2-8b21-13c8172fe1cf",
                            RoleId = "6079f57f-a875-4257-81e0-d3540518482c"
                        },
                        new
                        {
                            UserId = "ba9e9743-a482-4ee0-8997-e4dfe0765f94",
                            RoleId = "94a4da16-d0cd-47e2-86f3-2e500fd55e4e"
                        },
                        new
                        {
                            UserId = "54f08fb7-34c9-4c56-af7b-8895b76c16d9",
                            RoleId = "9555489f-04b3-4aa8-b33e-d603c5f3b93c"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Mvc_Day4.Areas.Identity.Data.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "226f9379-7a36-4df6-a98d-260651b353d2",
                            AccessFailedCount = 0,
                            Age = 22,
                            ConcurrencyStamp = "82cd0cff-9303-4b94-905f-bc6f411fa684",
                            Email = "Mohamed.Ahmed@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mohamed",
                            LastName = "Ahmed",
                            LockoutEnabled = false,
                            NormalizedEmail = "MOHAMED.AHMED@GMAIL.COM",
                            NormalizedUserName = "MOHAMED.AHMED@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDDC741w3u09jKhnHrk+eoBNDlaluYyHXEziWXeRoAhFEJCI4e79tvhvwsbe6jS3Jg==",
                            PhoneNumber = "01094456724",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "ee64906a-eabe-4e6c-a73c-840c300ba18b",
                            TwoFactorEnabled = true,
                            UserName = "Mohamed.Ahmed@gmail.com"
                        },
                        new
                        {
                            Id = "bccdb075-ea49-45d2-8b21-13c8172fe1cf",
                            AccessFailedCount = 0,
                            Age = 20,
                            ConcurrencyStamp = "25dab51b-60e2-42ab-b47e-59a835372ef8",
                            Email = "Ali.Ahmed@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ali",
                            LastName = "Ahmed",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALI.AHMED@GMAIL.COM",
                            NormalizedUserName = "ALI.AHMED@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHnf77f26On8+inu5oSKET8G3ggRcP/oN8Olp0z/pECA45jHZ62Ej6RIXtFPWS6ImQ==",
                            PhoneNumber = "01194456724",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "13519ddb-2a1c-479e-b7c6-1fa1a706c342",
                            TwoFactorEnabled = true,
                            UserName = "Ali.Ahmed@gmail.com"
                        },
                        new
                        {
                            Id = "ba9e9743-a482-4ee0-8997-e4dfe0765f94",
                            AccessFailedCount = 0,
                            Age = 21,
                            ConcurrencyStamp = "849e883e-f236-485c-8201-14ad342dda5a",
                            Email = "Alaa.Mohamed@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Alaa",
                            LastName = "Mohamed",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALAA.MOHAMED@GMAIL.COM",
                            NormalizedUserName = "ALAA.MOHAMED@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEE0ZGOMx8ZsIIIRT0tRplEs+KVYvIQggAiLrRbSPZb7L+Dtp4Qb9EnHefixmMlKlhA==",
                            PhoneNumber = "01294456724",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "e8fc5c6c-2f21-4d8a-ae0a-f8dfb4b59ae1",
                            TwoFactorEnabled = true,
                            UserName = "Alaa.Mohamed@gmail.com"
                        },
                        new
                        {
                            Id = "54f08fb7-34c9-4c56-af7b-8895b76c16d9",
                            AccessFailedCount = 0,
                            Age = 20,
                            ConcurrencyStamp = "35a5641a-c996-4aca-a0a9-2eee1603d1c5",
                            Email = "Mona.Mohamed@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mona",
                            LastName = "Mohamed",
                            LockoutEnabled = false,
                            NormalizedEmail = "MONA.MOHAMED@GMAIL.COM",
                            NormalizedUserName = "MONA.MOHAMED@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBq5HwvAVKXCUUW8IaqyORP3BVlUEhK2FNoSs0nshdBQYEtVNZjKA+8V829gHAjgPg==",
                            PhoneNumber = "01095556724",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "410308ef-f7b0-46c4-a05e-c3e2bdfbd87b",
                            TwoFactorEnabled = true,
                            UserName = "Mona.Mohamed@gmail.com"
                        });
                });

            modelBuilder.Entity("Mvc_Day4.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MovieLength")
                        .HasColumnType("float");

                    b.Property<string>("MovieStar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MovieTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PublishDate")
                        .HasColumnType("int");

                    b.Property<double>("Rate")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("MovieTypeId");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Greater than 15",
                            MovieLength = 2.1500000953674316,
                            MovieStar = "Brad Bit",
                            MovieTypeId = 1,
                            Name = "Se7en",
                            PublishDate = 1998,
                            Rate = 8.5
                        },
                        new
                        {
                            Id = 2,
                            Category = "Greater than 16",
                            MovieLength = 2.2999999523162842,
                            MovieStar = "Leonardo DeCabrio",
                            MovieTypeId = 2,
                            Name = "ShutterIsland",
                            PublishDate = 2010,
                            Rate = 8.0
                        },
                        new
                        {
                            Id = 3,
                            Category = "Public",
                            MovieLength = 2.0,
                            MovieStar = "Tom Cruise",
                            MovieTypeId = 4,
                            Name = "MissionImpossible",
                            PublishDate = 2012,
                            Rate = 8.0
                        },
                        new
                        {
                            Id = 4,
                            Category = "Public",
                            MovieLength = 3.0,
                            MovieStar = "Mathio Makonhy",
                            MovieTypeId = 3,
                            Name = "Interstellar",
                            PublishDate = 2014,
                            Rate = 9.0
                        });
                });

            modelBuilder.Entity("Mvc_Day4.Models.MovieType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MovieTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Suspense"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Dramatic"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Sciense Fiction"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Action"
                        });
                });

            modelBuilder.Entity("Mvc_Day4.Areas.Identity.Data.AppIdentityRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.HasDiscriminator().HasValue("AppIdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Mvc_Day4.Areas.Identity.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Mvc_Day4.Areas.Identity.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mvc_Day4.Areas.Identity.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Mvc_Day4.Areas.Identity.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mvc_Day4.Models.Movie", b =>
                {
                    b.HasOne("Mvc_Day4.Models.MovieType", "MovieType")
                        .WithMany()
                        .HasForeignKey("MovieTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MovieType");
                });
#pragma warning restore 612, 618
        }
    }
}
