// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Mvc_Day4.Areas.Identity.Data;

#nullable disable

namespace Mvc_Day4.Migrations
{
    [DbContext(typeof(IdentityContext))]
    [Migration("20230802093016_CreateMigration")]
    partial class CreateMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = "beea5574-8be4-43af-92ec-33349b81dd17",
                            Name = "Adminstration",
                            NormalizedName = "ADMINSTRATION"
                        },
                        new
                        {
                            Id = "30fe2baa-1820-4aad-bb7b-5a7f7d8a51d0",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "857a2334-1e35-420e-a54e-27efdee389c5",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "d0d41eed-f5db-4d32-96d5-1968539e9ce4",
                            Name = "Med-Manager",
                            NormalizedName = "MED-MANAGER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "4ec3b723-51f5-4b77-a6f5-8408602bf676",
                            RoleId = "beea5574-8be4-43af-92ec-33349b81dd17"
                        },
                        new
                        {
                            UserId = "cf75b59d-c2ed-4c9f-aad0-355ec8564985",
                            RoleId = "30fe2baa-1820-4aad-bb7b-5a7f7d8a51d0"
                        },
                        new
                        {
                            UserId = "96e8e766-933d-43c7-9ee1-50061f782aad",
                            RoleId = "857a2334-1e35-420e-a54e-27efdee389c5"
                        },
                        new
                        {
                            UserId = "ea176324-d236-4792-98b4-280aee1b7668",
                            RoleId = "d0d41eed-f5db-4d32-96d5-1968539e9ce4"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Mvc_Day4.Areas.Identity.Data.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "4ec3b723-51f5-4b77-a6f5-8408602bf676",
                            AccessFailedCount = 0,
                            Age = 22,
                            ConcurrencyStamp = "02bf5d7f-ece1-4683-8546-8ed23d5a37c3",
                            Email = "Mohamed.Ahmed@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mohamed",
                            LastName = "Ahmed",
                            LockoutEnabled = false,
                            NormalizedEmail = "MOHAMED.AHMED@GMAIL.COM",
                            NormalizedUserName = "MOHAMED.AHMED@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKXtGST3nNel42p3hTmJ4jnjEINkDtbqG039eomopI2bhcMclIWotVsFQ1OlEvefmw==",
                            PhoneNumber = "01094456724",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "4d42b056-a972-4085-87c5-436b40747c8e",
                            TwoFactorEnabled = true,
                            UserName = "Mohamed.Ahmed@gmail.com"
                        },
                        new
                        {
                            Id = "cf75b59d-c2ed-4c9f-aad0-355ec8564985",
                            AccessFailedCount = 0,
                            Age = 20,
                            ConcurrencyStamp = "dbb9271c-6b2d-4b53-a2db-7bdbe4812e78",
                            Email = "Ali.Ahmed@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ali",
                            LastName = "Ahmed",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALI.AHMED@GMAIL.COM",
                            NormalizedUserName = "ALI.AHMED@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEH3XtUxnXcZjLLPOWD1NrfR5RoF/rjq6XNLIKMxSWeFy2nh5zZsaBf3lg6weHSow1Q==",
                            PhoneNumber = "01194456724",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "77dfa41e-c59c-4079-85f0-416b70527471",
                            TwoFactorEnabled = true,
                            UserName = "Ali.Ahmed@gmail.com"
                        },
                        new
                        {
                            Id = "96e8e766-933d-43c7-9ee1-50061f782aad",
                            AccessFailedCount = 0,
                            Age = 21,
                            ConcurrencyStamp = "c92f5ae4-fe49-4bcf-896e-f1a85f60139d",
                            Email = "Alaa.Mohamed@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Alaa",
                            LastName = "Mohamed",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALAA.MOHAMED@GMAIL.COM",
                            NormalizedUserName = "ALAA.MOHAMED@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPNL5nxFcxjlkQnICzk/vtlMeUWApdx1Qm2/OKq0z5spMaxXAjREGxYncsXctVbWYQ==",
                            PhoneNumber = "01294456724",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "956f5fff-f9a2-46fa-a4b6-abc7b606b44b",
                            TwoFactorEnabled = true,
                            UserName = "Alaa.Mohamed@gmail.com"
                        },
                        new
                        {
                            Id = "ea176324-d236-4792-98b4-280aee1b7668",
                            AccessFailedCount = 0,
                            Age = 20,
                            ConcurrencyStamp = "17aed9fa-0596-4592-890e-ce4fc31b170a",
                            Email = "Mona.Mohamed@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mona",
                            LastName = "Mohamed",
                            LockoutEnabled = false,
                            NormalizedEmail = "MONA.MOHAMED@GMAIL.COM",
                            NormalizedUserName = "MONA.MOHAMED@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECkWXsVMfuV1u7KSbZRN2u5t6RegJzlopQcCfhDjd084DDYUNb0X27mxL9mnqVdEdg==",
                            PhoneNumber = "01095556724",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "dd92e091-82ce-4db5-af25-5f9564dbfbee",
                            TwoFactorEnabled = true,
                            UserName = "Mona.Mohamed@gmail.com"
                        });
                });

            modelBuilder.Entity("Mvc_Day4.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MovieLength")
                        .HasColumnType("float");

                    b.Property<string>("MovieStar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MovieTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PublishDate")
                        .HasColumnType("int");

                    b.Property<double>("Rate")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("MovieTypeId");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Greater than 15",
                            MovieLength = 2.1500000953674316,
                            MovieStar = "Brad Bit",
                            MovieTypeId = 1,
                            Name = "Se7en",
                            PublishDate = 1998,
                            Rate = 8.5
                        },
                        new
                        {
                            Id = 2,
                            Category = "Greater than 16",
                            MovieLength = 2.2999999523162842,
                            MovieStar = "Leonardo DeCabrio",
                            MovieTypeId = 2,
                            Name = "ShutterIsland",
                            PublishDate = 2010,
                            Rate = 8.0
                        },
                        new
                        {
                            Id = 3,
                            Category = "Public",
                            MovieLength = 2.0,
                            MovieStar = "Tom Cruise",
                            MovieTypeId = 4,
                            Name = "MissionImpossible",
                            PublishDate = 2012,
                            Rate = 8.0
                        },
                        new
                        {
                            Id = 4,
                            Category = "Public",
                            MovieLength = 3.0,
                            MovieStar = "Mathio Makonhy",
                            MovieTypeId = 3,
                            Name = "Interstellar",
                            PublishDate = 2014,
                            Rate = 9.0
                        });
                });

            modelBuilder.Entity("Mvc_Day4.Models.MovieType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MovieTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Suspense"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Dramatic"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Sciense Fiction"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Action"
                        });
                });

            modelBuilder.Entity("Mvc_Day4.Areas.Identity.Data.AppIdentityRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.HasDiscriminator().HasValue("AppIdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Mvc_Day4.Areas.Identity.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Mvc_Day4.Areas.Identity.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mvc_Day4.Areas.Identity.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Mvc_Day4.Areas.Identity.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mvc_Day4.Models.Movie", b =>
                {
                    b.HasOne("Mvc_Day4.Models.MovieType", "MovieType")
                        .WithMany()
                        .HasForeignKey("MovieTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MovieType");
                });
#pragma warning restore 612, 618
        }
    }
}
